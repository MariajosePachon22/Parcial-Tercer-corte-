# Desarrollo Innovador 1: Sistema de turnos.
¿Para qué se implementó?
Se implemento para que esta batalla sea más dinámica, y no solo se quede en los que otorgaría la maquina, si no que cada usuario tuviera la opción de elegir su Pokémon favorito.
Para que se pudiera elegir un Pokémon aleatorio se uso las librerías #include <cstdlib>, #include <ctime>.
¿Cómo se llevó a cabo su implementación?
Pokemon jugador2 = (modo == 2)
    ? elegirPokemonJugador(pokemones)
    : pokemones[rand() % pokemones.size()];
En este código de bloque se ve como es la estructura para elegir un aleatorio, especificamente en <rand() % pokemones.size() genera un número aleatorio entre 0 y pokemones.size() - 1.>
Ese número se usa como índice para seleccionar un Pokémon del vector pokemones.

# Desarrollo Innovador 2: 4 ataques diferentes.
¿Para qué se implementó?
El jugador tiene que pensar cuál es el mejor para usar y el combate se vuelve más estratégico y menos aleatorio.
Hace las rondas más dinámicas.
¿Cómo se llevó a cabo su implementación?
Esa parte ocurre en la función mostrarMenu():

"int mostrarMenu(Pokemon &poke) {
	int opcion;
	cout << "\nTurno de " << poke.nombre << ". Elige un ataque:\n";
	cout << "1. " << poke.ataque1.nombre << "\n";
	cout << "2. " << poke.ataque2.nombre << "\n";
	cout << "3. " << poke.ataque3.nombre << "\n";
	cout << "4. " << poke.ataque4.nombre << "\n";
	cout << "Opcion: ";
	cin >> opcion;
	while (opcion != 1 && opcion != 2 && opcion != 3 && opcion != 4) {
		cout << "Opción invalida. Intenta de nuevo: ";
		cin >> opcion;
	}
	return opcion;
}"
Y luego, en usarAtaque(), se ejecuta el ataque seleccionado:
"void usarAtaque(int opcion, Pokemon &oponente) {
	Ataque ataqueSeleccionado = ataque1;
	switch (opcion) {
		case 1: ataqueSeleccionado = ataque1; break;
		case 2: ataqueSeleccionado = ataque2; break;
		case 3: ataqueSeleccionado = ataque3; break;
		case 4: ataqueSeleccionado = ataque4; break;
	}
	cout << nombre << " usa " << ataqueSeleccionado.nombre << "!" << endl;
	oponente.recibirDaño(ataqueSeleccionado.daño);
	cout << oponente.nombre << " recibe " << ataqueSeleccionado.daño << " de daño.\n";
}"
